import {CPU} from "../interfaces/cpu";
import {Log} from "../../classes/log";
import {DSRCard} from "../interfaces/dsr-card";
import {MemoryMappedCard} from "../interfaces/memory-mapped-card";

export class TIPI implements DSRCard, MemoryMappedCard {

    static ID = 'TIPI';

    static TD_OUT = 0x5FFE; // TI Data (output)
    static TC_OUT = 0x5FFC; // TI Control Signal (output)
    static RD_IN = 0x5FFA;  // PI Data (input)
    static RC_IN = 0x5FF8;  // PI Control Signal (input)

    private romEnabled = false;
    private readonly cpu: CPU;
    private readonly websocketURI: string;
    private readonly canvas: HTMLCanvasElement;
    private readonly enableWebsocket: boolean;
    private readonly fastMouseEmulation: boolean;
    private websocket: WebSocket;
    private websocketOpen: boolean;
    private closing: boolean;
    private td = 0;
    private tc = 0;
    private rd = 0;
    private rc = 0;
    private txMsg: Uint8Array | null;
    private txLen = 0;
    private txIdx = -2;
    private rxMsgs: Uint8Array[] = [];
    private rxIdx: number;
    private useSync: boolean;

    private movementX = 0;
    private movementY = 0;
    private buttons = 0;
    private mouseRequested = false;

    constructor(cpu: CPU, websocketURI: string, canvas: HTMLCanvasElement, enableWebsocket: boolean, fastMouseEmulation: boolean) {
        this.cpu = cpu;
        this.websocketURI = websocketURI;
        this.canvas = canvas;
        this.enableWebsocket = enableWebsocket;
        this.fastMouseEmulation = fastMouseEmulation;
        this.canvas.addEventListener('mousemove', this.mouseHandler.bind(this));
        this.canvas.addEventListener('mouseup', this.mouseHandler.bind(this));
        this.canvas.addEventListener('mousedown', this.mouseHandler.bind(this));
    }

    public reset() {
        if (this.enableWebsocket && (!this.websocket || !this.websocketOpen)) {
            console.log("TIPI creating websocket");
            this.td = 0;
            this.tc = 0;
            this.rd = 0;
            this.rc = 0;
            this.txMsg = null;
            this.txLen = 0;
            this.txIdx = -2;
            this.rxMsgs = [];
            this.rxIdx = -2;
            this.useSync = true;
            this.websocket = new WebSocket(this.websocketURI);
            this.websocket.binaryType = "arraybuffer";
            this.websocket.onopen = (evt) => {
                console.log("TIPI websocket opened");
                Log.getLog().info("TIPI websocket opened");
                this.websocketOpen = true;
                this.cpu.setSuspended(false);
            };
            this.websocket.onclose = (evt) => {
                console.log("TIPI websocket closed");
                this.websocketOpen = false;
                if (!this.closing) {
                    this.cpu.setSuspended(true);
                }
                window.setTimeout(
                    () => {
                        if (!this.closing) {
                            this.reset();
                        }
                    }, 2000
                );
            };
            this.websocket.onmessage = (evt) => {
                const message = evt.data;
                if (typeof message === "object") {
                    this.rxMsgs.push(new Uint8Array(message));
                } else if (message === "ASYNC") {
                    this.useSync = false;
                    console.log("TIPI async mode enabled");
                }
            };
        }
    }

    public getId(): string {
        return TIPI.ID;
    }

    public getDSR(): number[] {
        return TIPI_DSR_ROM;
    }

    public isEnabled() {
        return this.romEnabled;
    }

    public getDSRBankOffset(): number {
        return 0;
    }

    public getCruAddress(): number {
        return this.fastMouseEmulation ? 0x1200 : 0x1000;
    }

    public readCruBit(bit: number): boolean {
        return false;
    }

    public writeCruBit(bit: number, value: boolean): void {
        if (bit === 0) {
            this.romEnabled = value;
        } else if (bit === 1 && value) {
            this.signalReset();
        }
    }

    readMemoryMapped(addr: number, cpu: CPU): number {
        switch (addr) {
            case TIPI.RC_IN:
                return this.getRC();
            case TIPI.RD_IN:
                return this.getRD();
            case TIPI.TC_OUT:
                return this.getTC();
            case TIPI.TD_OUT:
                return this.getTD();
            default:
                const romAddr = addr - 0x4000;
                return (TIPI_DSR_ROM[romAddr] << 8) | TIPI_DSR_ROM[romAddr + 1];
        }
    }

    writeMemoryMapped(addr: number, word: number, cpu: CPU): void {
        if (addr === TIPI.TC_OUT) {
            this.setTC(word);
        } else if (addr === TIPI.TD_OUT) {
            this.setTD(word);
        }
    }

    getByte(addr: number): number {
        const romAddr = addr - 0x4000;
        return TIPI_DSR_ROM[romAddr];
    }

    /*
      DSR sequences:

      Reset handshake:
        TCOUT = TSRESET(0xF1)
        while RCIN != 0xF1 {}

      Transmit handshake: byte R2
        TCOUT = R2
        while RCIN != R2 {}
        R2 ^= 1

      Send message:
        do reset handshake
        R2 = TSWB(0x02)
        TDOUT = MSB(length)
        do transmit handshake TSWB(0x02)
        TDOUT = LSB(length)
        do transmit handshake TSWB(0x02)
        while (length-- != 0) {
          TDOUT = *data++
          do transmit handshake TSWB(0x02)
        }

      Recv message:
        do reset handshake
        R2 = TSRB(0x06)
        do transmit handshake TSRB(0x06)
        MSB(length) = RDIN
        do transmit handshake TSRB(0x06)
        LSB(length) = RDIN
        while (length-- != 0) {
          do transmit handshake TSRB(0x06)
          *data++ = RDIN
        }
    */


    getTD(): number {
        return this.td;    // TDOUT - TI Data
    }

    setTD(value: number) {
        this.td = value;   // TDOUT - TI Data
    }

    getTC(): number {
        return this.tc;    // TCOUT - TI Control
    }

    setTC(value: number) {
        this.tc = value;  // TCOUT - TI Control
        this.processMsg();
    }

    getRD(): number {
        return this.rd;  // RDIN - RPi Data
    }

    getRC(): number {
        this.processMsg();
        return this.rc;  // RCIN - RPi Control
    }

    signalReset() {
        console.log("TIPI signal reset");
        if (this.websocketOpen) {
            // This will close the websocket
            this.websocket.send("RESET");
        }
    }

    processMsg() {
        if (this.tc === 0xf1) {
            // TSRSET (reset-sync)
            this.rc = this.tc; // ack reset
            if (this.rxIdx !== -2) {
              console.log("TSRSET rxMsg is out of sync");
            }
            this.rxIdx = -2;
            if (this.txMsg != null && this.txIdx !== -2) {
              // console.log("TSRSET txMsg is out of sync");
              this.txMsg = null;
            }
            this.txIdx = -2;

            // Note: sync handshake is no longer needed for async mode --
            // websocket server is asynchronous, and client emulation
            // must store multiple received messages (this.rxMsgs FIFO)

            // console.log("TIPI TSRESET");
            if (this.useSync && this.websocketOpen) {
                this.websocket.send("SYNC");
            }
        } else if (this.tc === this.rc) {
            // already acked, nothing to do

        } else if ((this.tc & 0xfe) === 0x02) {
            // TSWB (write-byte)
            // idx=-2  message length high byte
            // idx=-1  message length low byte
            // idx>=0  message data bytes
            if (this.txIdx === -2) {
                this.txLen = this.td << 8;
            } else if (this.txIdx === -1) {
                this.txLen += this.td;
                this.txMsg = new Uint8Array(new ArrayBuffer(this.txLen));
            } else if (this.txMsg != null) {
                this.txMsg[this.txIdx] = this.td;
            }
            this.txIdx++;
            if (this.txMsg && this.txIdx === this.txLen) {
                if (this.fastMouseEmulation && this.txLen === 1 && this.txMsg[0] === 0x20) {
                    this.mouseRequested = true;
                } else {
                    if (this.websocketOpen) {
                        this.websocket.send(this.txMsg.buffer);
                    }
                    this.txMsg = null;
                    this.txIdx = -2;
                }
                // console.log("txMsg len="+this.txLen);
            }
            this.rc = this.tc; // ack
        } else if ((this.tc & 0xfe) === 0x06) {
            // TSRB (read-byte)
            if (this.mouseRequested) {
                this.createMouseMsg();
                this.mouseRequested = false;
            }
            if (this.rxMsgs.length > 0) {
                const msg = this.rxMsgs[0];
                // idx=-2  message length high byte
                // idx=-1  message length low byte
                // idx>=0  message data bytes
                if (this.rxIdx === -2) {
                    // console.log("rxMsg len="+msg.length);
                    this.rd = (msg.length >> 8) & 0xff;
                } else if (this.rxIdx === -1) {
                    this.rd = msg.length & 0xff;
                } else {
                    this.rd = msg[this.rxIdx];
                }
                this.rxIdx++;
                if (this.rxIdx === msg.length) {
                  this.rxMsgs.shift();
                  this.rxIdx = -2;
                }
                this.rc = this.tc; // ack
            }
        } else {
            // console.log("TIPI write TC: " + Util.toHexByte(this.tc) + " (protocol error)");
        }
    }

    mouseHandler(evt: MouseEvent) {
        const scale = this.canvas.clientHeight / 240;
        this.movementX = Math.round(evt.movementX / scale);
        this.movementY = Math.round(evt.movementY / scale);
        this.buttons = evt.buttons;
        if (this.websocketOpen && !this.fastMouseEmulation) {
            this.websocket.send("MOUSE " + evt.buttons + " " + this.movementX + " " + this.movementY);
        }
    }

    createMouseMsg() {
        const mouseMsg = new Uint8Array(3);
        mouseMsg[0] = this.movementX;
        mouseMsg[1] = this.movementY;
        mouseMsg[2] = this.buttons;
        this.rxMsgs.push(mouseMsg);
        this.movementX = 0;
        this.movementY = 0;
    }

    close() {
        if (this.websocket) {
            this.closing = true;
            this.websocket.onclose = () => {
                this.websocketOpen = false;
            };
            this.websocket.close();
            this.cpu.setSuspended(false);
        }
        this.canvas.removeEventListener('mousemove', this.mouseHandler);
        this.canvas.removeEventListener('mouseup', this.mouseHandler);
        this.canvas.removeEventListener('mousedown', this.mouseHandler);
    }
}

export const TIPI_DSR_ROM = [
    0xaa, 0x01, 0x00, 0x00, 0x4c, 0xa2, 0x00, 0x00, 0x4c, 0xa6, 0x4d, 0x4a, 0x00, 0x00, 0x00, 0x00,
    0x41, 0xd0, 0x40, 0xd4, 0x42, 0x4a, 0x41, 0x4c, 0x00, 0x00, 0x32, 0x30, 0x32, 0x33, 0x2d, 0x30,
    0x38, 0x2d, 0x30, 0x34, 0x54, 0x31, 0x36, 0x3a, 0x35, 0x32, 0x3a, 0x31, 0x31, 0x2d, 0x30, 0x37,
    0x3a, 0x30, 0x30, 0x00, 0x83, 0xe0, 0x40, 0x38, 0xc0, 0x1d, 0x02, 0x60, 0x80, 0x00, 0x06, 0xc0,
    0xd8, 0x00, 0x8c, 0x02, 0x06, 0xc0, 0xd8, 0x00, 0x8c, 0x02, 0x03, 0x80, 0x83, 0xe0, 0x40, 0x50,
    0xc0, 0x1d, 0xc0, 0x6d, 0x00, 0x02, 0xc0, 0xad, 0x00, 0x04, 0x02, 0x60, 0x40, 0x00, 0x06, 0xc0,
    0xd8, 0x00, 0x8c, 0x02, 0x06, 0xc0, 0xd8, 0x00, 0x8c, 0x02, 0xd8, 0x31, 0x8c, 0x00, 0x06, 0x02,
    0x16, 0xfc, 0x03, 0x80, 0x83, 0xe0, 0x40, 0x78, 0xc0, 0x1d, 0xc0, 0x6d, 0x00, 0x02, 0xc0, 0xad,
    0x00, 0x04, 0x06, 0xc1, 0xd8, 0x01, 0x8c, 0x02, 0x06, 0xc1, 0xd8, 0x01, 0x8c, 0x02, 0xdc, 0x20,
    0x88, 0x00, 0x06, 0x02, 0x16, 0xfc, 0x03, 0x80, 0x83, 0xe0, 0x40, 0x9c, 0xc0, 0x1d, 0xc0, 0x6d,
    0x00, 0x02, 0xc0, 0xad, 0x00, 0x04, 0x06, 0xc1, 0xd8, 0x01, 0x8c, 0x02, 0x06, 0xc1, 0xd8, 0x01,
    0x8c, 0x02, 0xd1, 0x20, 0x88, 0x00, 0x02, 0x60, 0x40, 0x00, 0x06, 0xc0, 0xd8, 0x00, 0x8c, 0x02,
    0x06, 0xc0, 0xd8, 0x00, 0x8c, 0x02, 0xd8, 0x04, 0x8c, 0x00, 0x05, 0x80, 0x05, 0x81, 0x06, 0x02,
    0x16, 0xea, 0x03, 0x80, 0x02, 0x02, 0xf1, 0x00, 0xd8, 0x02, 0x5f, 0xfd, 0x90, 0xa0, 0x5f, 0xf9,
    0x16, 0xfd, 0x02, 0x02, 0x02, 0x00, 0xd8, 0x00, 0x5f, 0xff, 0xd8, 0x02, 0x5f, 0xfd, 0xd0, 0xe0,
    0x5f, 0xf9, 0x90, 0xc2, 0x16, 0xfc, 0x02, 0x22, 0x01, 0x00, 0x02, 0x42, 0x01, 0x00, 0x02, 0x62,
    0x02, 0x00, 0x06, 0xc0, 0xd8, 0x00, 0x5f, 0xff, 0xd8, 0x02, 0x5f, 0xfd, 0xd0, 0xe0, 0x5f, 0xf9,
    0x90, 0xc2, 0x16, 0xfc, 0x02, 0x22, 0x01, 0x00, 0x02, 0x42, 0x01, 0x00, 0x02, 0x62, 0x02, 0x00,
    0x06, 0xc0, 0x02, 0x80, 0x00, 0x00, 0x13, 0x11, 0xd8, 0x11, 0x5f, 0xff, 0xd8, 0x02, 0x5f, 0xfd,
    0xd0, 0xe0, 0x5f, 0xf9, 0x90, 0xc2, 0x16, 0xfc, 0x02, 0x22, 0x01, 0x00, 0x02, 0x42, 0x01, 0x00,
    0x02, 0x62, 0x02, 0x00, 0x05, 0x81, 0x06, 0x00, 0x16, 0xef, 0x04, 0x5b, 0x02, 0x02, 0xf1, 0x00,
    0xd8, 0x02, 0x5f, 0xfd, 0x90, 0xa0, 0x5f, 0xf9, 0x16, 0xfd, 0x02, 0x02, 0x02, 0x00, 0xd8, 0x00,
    0x5f, 0xff, 0xd8, 0x02, 0x5f, 0xfd, 0xd0, 0xe0, 0x5f, 0xf9, 0x90, 0xc2, 0x16, 0xfc, 0x02, 0x22,
    0x01, 0x00, 0x02, 0x42, 0x01, 0x00, 0x02, 0x62, 0x02, 0x00, 0x06, 0xc0, 0xd8, 0x00, 0x5f, 0xff,
    0xd8, 0x02, 0x5f, 0xfd, 0xd0, 0xe0, 0x5f, 0xf9, 0x90, 0xc2, 0x16, 0xfc, 0x02, 0x22, 0x01, 0x00,
    0x02, 0x42, 0x01, 0x00, 0x02, 0x62, 0x02, 0x00, 0x06, 0xc0, 0x02, 0x80, 0x00, 0x00, 0x13, 0x17,
    0x06, 0xc1, 0xd8, 0x01, 0x8c, 0x02, 0x06, 0xc1, 0xd8, 0x01, 0x8c, 0x02, 0xd8, 0x20, 0x88, 0x00,
    0x5f, 0xff, 0xd8, 0x02, 0x5f, 0xfd, 0xd0, 0xe0, 0x5f, 0xf9, 0x90, 0xc2, 0x16, 0xfc, 0x02, 0x22,
    0x01, 0x00, 0x02, 0x42, 0x01, 0x00, 0x02, 0x62, 0x02, 0x00, 0x06, 0x00, 0x16, 0xef, 0x04, 0x5b,
    0x02, 0x02, 0xf1, 0x00, 0xd8, 0x02, 0x5f, 0xfd, 0x90, 0xa0, 0x5f, 0xf9, 0x16, 0xfd, 0x02, 0x02,
    0x06, 0x00, 0xd8, 0x02, 0x5f, 0xfd, 0xd0, 0xe0, 0x5f, 0xf9, 0x90, 0xc2, 0x16, 0xfc, 0x02, 0x22,
    0x01, 0x00, 0x02, 0x42, 0x01, 0x00, 0x02, 0x62, 0x06, 0x00, 0xd1, 0x20, 0x5f, 0xfb, 0x06, 0xc4,
    0xd8, 0x02, 0x5f, 0xfd, 0xd0, 0xe0, 0x5f, 0xf9, 0x90, 0xc2, 0x16, 0xfc, 0x02, 0x22, 0x01, 0x00,
    0x02, 0x42, 0x01, 0x00, 0x02, 0x62, 0x06, 0x00, 0xd1, 0x20, 0x5f, 0xfb, 0x06, 0xc4, 0x04, 0xc0,
    0x02, 0x84, 0x00, 0x00, 0x13, 0x11, 0xd8, 0x02, 0x5f, 0xfd, 0xd0, 0xe0, 0x5f, 0xf9, 0x90, 0xc2,
    0x16, 0xfc, 0x02, 0x22, 0x01, 0x00, 0x02, 0x42, 0x01, 0x00, 0x02, 0x62, 0x06, 0x00, 0xdc, 0x60,
    0x5f, 0xfb, 0x05, 0x80, 0x81, 0x00, 0x16, 0xef, 0x04, 0x5b, 0x02, 0x02, 0xf1, 0x00, 0xd8, 0x02,
    0x5f, 0xfd, 0x90, 0xa0, 0x5f, 0xf9, 0x16, 0xfd, 0x02, 0x02, 0x06, 0x00, 0xd8, 0x02, 0x5f, 0xfd,
    0xd0, 0xe0, 0x5f, 0xf9, 0x90, 0xc2, 0x16, 0xfc, 0x02, 0x22, 0x01, 0x00, 0x02, 0x42, 0x01, 0x00,
    0x02, 0x62, 0x06, 0x00, 0xd1, 0x20, 0x5f, 0xfb, 0x06, 0xc4, 0xd8, 0x02, 0x5f, 0xfd, 0xd0, 0xe0,
    0x5f, 0xf9, 0x90, 0xc2, 0x16, 0xfc, 0x02, 0x22, 0x01, 0x00, 0x02, 0x42, 0x01, 0x00, 0x02, 0x62,
    0x06, 0x00, 0xd1, 0x20, 0x5f, 0xfb, 0x06, 0xc4, 0x04, 0xc0, 0x02, 0x84, 0x00, 0x00, 0x13, 0x1a,
    0x02, 0x61, 0x40, 0x00, 0x06, 0xc1, 0xd8, 0x01, 0x8c, 0x02, 0x06, 0xc1, 0xd8, 0x01, 0x8c, 0x02,
    0xd8, 0x02, 0x5f, 0xfd, 0xd0, 0xe0, 0x5f, 0xf9, 0x90, 0xc2, 0x16, 0xfc, 0x02, 0x22, 0x01, 0x00,
    0x02, 0x42, 0x01, 0x00, 0x02, 0x62, 0x06, 0x00, 0xd8, 0x20, 0x5f, 0xfb, 0x8c, 0x00, 0x05, 0x80,
    0x81, 0x00, 0x16, 0xee, 0x04, 0x5b, 0xaa, 0x3f, 0xff, 0x11, 0x03, 0x00, 0x02, 0xa5, 0x04, 0xe0,
    0x5f, 0xff, 0x04, 0xe0, 0x5f, 0xfd, 0x1d, 0x01, 0x02, 0x01, 0x20, 0x00, 0x06, 0x01, 0x16, 0xfe,
    0x1e, 0x01, 0x02, 0x8c, 0x11, 0x00, 0x16, 0x14, 0x02, 0x02, 0x37, 0xd7, 0xc8, 0x02, 0x83, 0x70,
    0x02, 0x01, 0x8c, 0x02, 0x05, 0x82, 0x02, 0x62, 0x40, 0x00, 0xd4, 0x65, 0x00, 0x05, 0xd4, 0x42,
    0x04, 0xc2, 0xd8, 0x22, 0x42, 0xd6, 0x8c, 0x00, 0x05, 0x82, 0x02, 0x82, 0x00, 0x05, 0x16, 0xf9,
    0x04, 0x5b, 0x04, 0xc0, 0xd8, 0x00, 0x5f, 0xff, 0xd8, 0x00, 0x5f, 0xfd, 0x04, 0x5b, 0x03, 0x00,
    0x00, 0x00, 0xc8, 0x0b, 0x83, 0x5c, 0x02, 0xaa, 0x02, 0x04, 0x83, 0x56, 0x04, 0xc9, 0xa2, 0x54,
    0x62, 0x60, 0x83, 0x54, 0x02, 0x02, 0x00, 0x0a, 0x62, 0x42, 0xc8, 0x09, 0x83, 0x5a, 0x06, 0xc9,
    0xd8, 0x09, 0x8c, 0x02, 0x06, 0xc9, 0xd8, 0x09, 0x8c, 0x02, 0x02, 0x01, 0x00, 0x09, 0xc0, 0x8a,
    0xd8, 0xa0, 0x88, 0x00, 0xff, 0x84, 0x05, 0x82, 0x06, 0x01, 0x16, 0xfa, 0x02, 0x00, 0x00, 0x0a,
    0xc0, 0x4a, 0x02, 0x21, 0xff, 0x84, 0x06, 0xa0, 0x40, 0xd4, 0xc0, 0x60, 0x83, 0x56, 0x60, 0x60,
    0x83, 0x54, 0x06, 0x01, 0x06, 0xc1, 0xd8, 0x01, 0x8c, 0x02, 0x06, 0xc1, 0xd8, 0x01, 0x8c, 0x02,
    0xd0, 0x20, 0x88, 0x00, 0x09, 0x80, 0x05, 0x81, 0x06, 0xa0, 0x41, 0x4c, 0x02, 0x00, 0x00, 0x01,
    0xc0, 0x4a, 0x02, 0x21, 0x00, 0x13, 0x04, 0xc9, 0x06, 0xa0, 0x41, 0xd0, 0x02, 0x89, 0x00, 0x00,
    0x13, 0x05, 0x02, 0x89, 0x00, 0xff, 0x13, 0x27, 0xc0, 0x49, 0x16, 0x05, 0x06, 0xa0, 0x43, 0x22,
    0xc2, 0xe0, 0x83, 0x5c, 0x04, 0x5b, 0x0b, 0x31, 0xf0, 0x6a, 0xff, 0x85, 0xc0, 0xe0, 0x83, 0x5a,
    0x05, 0x83, 0x02, 0x63, 0x40, 0x00, 0x06, 0xc3, 0xd8, 0x03, 0x8c, 0x02, 0x06, 0xc3, 0xd8, 0x03,
    0x8c, 0x02, 0xd8, 0x01, 0x8c, 0x00, 0x06, 0xa0, 0x43, 0x22, 0xc2, 0xe0, 0x83, 0x5c, 0x05, 0xcb,
    0x04, 0x5b, 0x44, 0x18, 0x44, 0x46, 0x44, 0x4a, 0x44, 0xa8, 0x44, 0xe4, 0x44, 0xe6, 0x44, 0xf4,
    0x45, 0x1c, 0x45, 0x4a, 0x45, 0x1e, 0x04, 0xc1, 0xda, 0xaa, 0xff, 0x84, 0x00, 0x03, 0x0a, 0x11,
    0x02, 0x21, 0x43, 0xf2, 0xc0, 0x51, 0x04, 0x51, 0x02, 0x00, 0x00, 0x01, 0xc0, 0x4a, 0x02, 0x21,
    0x00, 0x12, 0x06, 0xa0, 0x41, 0xd0, 0xc0, 0xe0, 0x83, 0x5a, 0x02, 0x23, 0x00, 0x04, 0x02, 0x63,
    0x40, 0x00, 0x06, 0xc3, 0xd8, 0x03, 0x8c, 0x02, 0x06, 0xc3, 0xd8, 0x03, 0x8c, 0x02, 0xd8, 0x09,
    0x8c, 0x00, 0x04, 0x60, 0x45, 0x4a, 0x04, 0x60, 0x45, 0x4a, 0xc0, 0x2a, 0xff, 0x8a, 0xc0, 0x6a,
    0xff, 0x86, 0x06, 0xa0, 0x42, 0x4a, 0x06, 0xc0, 0xc0, 0xe0, 0x83, 0x5a, 0x02, 0x23, 0x00, 0x05,
    0x02, 0x63, 0x40, 0x00, 0x06, 0xc3, 0xd8, 0x03, 0x8c, 0x02, 0x06, 0xc3, 0xd8, 0x03, 0x8c, 0x02,
    0xd8, 0x00, 0x8c, 0x00, 0xc0, 0x6a, 0xff, 0x84, 0x02, 0x41, 0x00, 0x10, 0x16, 0x66, 0xc0, 0x6a,
    0xff, 0x8a, 0x05, 0x81, 0xc0, 0xe0, 0x83, 0x5a, 0x02, 0x23, 0x00, 0x06, 0x02, 0x63, 0x40, 0x00,
    0x06, 0xc3, 0xd8, 0x03, 0x8c, 0x02, 0x06, 0xc3, 0xd8, 0x03, 0x8c, 0x02, 0xd8, 0x01, 0x8c, 0x00,
    0xd8, 0x2a, 0x00, 0x03, 0x8c, 0x00, 0x10, 0x51, 0x04, 0xc0, 0xd0, 0x6a, 0xff, 0x85, 0x02, 0x41,
    0x10, 0x00, 0x16, 0x03, 0xd0, 0x2a, 0xff, 0x88, 0x10, 0x02, 0xd0, 0x2a, 0xff, 0x89, 0x06, 0xc0,
    0xc0, 0x6a, 0xff, 0x86, 0x06, 0xa0, 0x41, 0x4c, 0x02, 0x00, 0x00, 0x01, 0xc0, 0x4a, 0x02, 0x21,
    0x00, 0x13, 0x04, 0xc9, 0x06, 0xa0, 0x41, 0xd0, 0x02, 0x89, 0x00, 0xff, 0x13, 0xcb, 0xc0, 0x49,
    0x04, 0x60, 0x43, 0xc6, 0x10, 0x32, 0xc0, 0x2a, 0xff, 0x8a, 0xc0, 0x6a, 0xff, 0x86, 0x06, 0xa0,
    0x42, 0x4a, 0x10, 0x2b, 0xc0, 0x2a, 0xff, 0x8a, 0xc0, 0x6a, 0xff, 0x86, 0x06, 0xa0, 0x41, 0x4c,
    0x02, 0x00, 0x00, 0x01, 0xc0, 0x4a, 0x02, 0x21, 0x00, 0x13, 0x04, 0xc9, 0x06, 0xa0, 0x41, 0xd0,
    0x02, 0x89, 0x00, 0xff, 0x13, 0x1a, 0xc0, 0x49, 0x04, 0x60, 0x43, 0xc6, 0x10, 0x16, 0x02, 0x00,
    0x00, 0x01, 0xc0, 0x4a, 0x02, 0x21, 0x00, 0x12, 0x06, 0xa0, 0x41, 0xd0, 0xc0, 0xe0, 0x83, 0x5a,
    0x02, 0x23, 0x00, 0x08, 0x02, 0x63, 0x40, 0x00, 0x06, 0xc3, 0xd8, 0x03, 0x8c, 0x02, 0x06, 0xc3,
    0xd8, 0x03, 0x8c, 0x02, 0xd8, 0x09, 0x8c, 0x00, 0x10, 0x00, 0x06, 0xa0, 0x43, 0x22, 0xc2, 0xe0,
    0x83, 0x5c, 0x05, 0xcb, 0x04, 0x5b, 0x10, 0x12, 0x13, 0x14, 0x15, 0x17, 0x18, 0x19, 0x1a, 0x00,
    0x03, 0x00, 0x00, 0x00, 0xc1, 0xcb, 0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x45, 0x56, 0x06, 0xa0,
    0x40, 0xd4, 0x02, 0x00, 0x00, 0x02, 0x02, 0x01, 0x83, 0x4c, 0x06, 0xa0, 0x40, 0xd4, 0x02, 0x00,
    0x00, 0x02, 0x02, 0x01, 0x83, 0x50, 0x06, 0xa0, 0x40, 0xd4, 0xc8, 0x20, 0x83, 0x50, 0x83, 0x4a,
    0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x83, 0x50, 0x06, 0xa0, 0x41, 0xd0, 0x04, 0xc3, 0xd0, 0xe0,
    0x83, 0x50, 0x06, 0xc3, 0x02, 0x83, 0x00, 0xff, 0x13, 0x05, 0x0b, 0x33, 0xd8, 0x03, 0x83, 0x50,
    0x04, 0x60, 0x47, 0x7a, 0x04, 0xc1, 0x90, 0x60, 0x83, 0x4d, 0x13, 0x0a, 0x02, 0x00, 0x01, 0x00,
    0xc0, 0x60, 0x83, 0x4e, 0x06, 0xa0, 0x42, 0x4a, 0x04, 0xe0, 0x83, 0x50, 0x04, 0x60, 0x47, 0x7a,
    0x02, 0x00, 0x01, 0x00, 0xc0, 0x60, 0x83, 0x4e, 0x06, 0xa0, 0x41, 0x4c, 0x04, 0xe0, 0x83, 0x50,
    0x04, 0x60, 0x47, 0x7a, 0x03, 0x00, 0x00, 0x00, 0xc1, 0xcb, 0x02, 0x00, 0x00, 0x01, 0x02, 0x01,
    0x45, 0x57, 0x06, 0xa0, 0x40, 0xd4, 0x02, 0x00, 0x00, 0x02, 0x02, 0x01, 0x83, 0x4c, 0x06, 0xa0,
    0x40, 0xd4, 0x02, 0x00, 0x00, 0x0a, 0xc0, 0x60, 0x83, 0x4e, 0x06, 0xa0, 0x41, 0x4c, 0x04, 0x60,
    0x48, 0x5c, 0x03, 0x00, 0x00, 0x00, 0xc1, 0xcb, 0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x45, 0x58,
    0x06, 0xa0, 0x40, 0xd4, 0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x83, 0x4c, 0x06, 0xa0, 0x40, 0xd4,
    0x02, 0x00, 0x00, 0x0a, 0xc0, 0x60, 0x83, 0x4e, 0x06, 0xa0, 0x41, 0x4c, 0x02, 0x00, 0x00, 0x0a,
    0xc0, 0x60, 0x83, 0x50, 0x06, 0xa0, 0x41, 0x4c, 0x04, 0x60, 0x48, 0x5c, 0x03, 0x00, 0x00, 0x00,
    0xc1, 0xcb, 0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x45, 0x59, 0x06, 0xa0, 0x40, 0xd4, 0x02, 0x00,
    0x00, 0x02, 0x02, 0x01, 0x83, 0x4c, 0x06, 0xa0, 0x40, 0xd4, 0x02, 0x00, 0x00, 0x0a, 0xc0, 0x60,
    0x83, 0x4e, 0x06, 0xa0, 0x41, 0x4c, 0x04, 0xc8, 0xd2, 0x20, 0x83, 0x50, 0x06, 0xc8, 0x02, 0x28,
    0x83, 0x00, 0x02, 0x00, 0x00, 0x02, 0xc0, 0x48, 0x05, 0xc1, 0x06, 0xa0, 0x40, 0xd4, 0x02, 0x00,
    0x00, 0x01, 0x02, 0x01, 0x83, 0x50, 0x06, 0xa0, 0x41, 0xd0, 0x04, 0xc3, 0xd0, 0xe0, 0x83, 0x50,
    0x06, 0xc3, 0x02, 0x83, 0x00, 0xff, 0x13, 0x04, 0x0b, 0x33, 0xd8, 0x03, 0x83, 0x50, 0x10, 0x65,
    0xd8, 0x03, 0x83, 0x50, 0x02, 0x00, 0x00, 0x08, 0xc0, 0x48, 0x05, 0xc1, 0x06, 0xa0, 0x41, 0xd0,
    0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x83, 0x4d, 0x06, 0xa0, 0x41, 0xd0, 0xd8, 0x20, 0x83, 0x4d,
    0x83, 0x4d, 0x13, 0x53, 0x02, 0x00, 0x01, 0x00, 0xc0, 0x58, 0x06, 0xa0, 0x42, 0x4a, 0x10, 0x4d,
    0x03, 0x00, 0x00, 0x00, 0xc1, 0xcb, 0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x45, 0x5a, 0x06, 0xa0,
    0x40, 0xd4, 0x02, 0x00, 0x00, 0x02, 0x02, 0x01, 0x83, 0x4c, 0x06, 0xa0, 0x40, 0xd4, 0x02, 0x00,
    0x00, 0x0a, 0xc0, 0x60, 0x83, 0x4e, 0x06, 0xa0, 0x41, 0x4c, 0x04, 0xc8, 0xd2, 0x20, 0x83, 0x50,
    0x06, 0xc8, 0x02, 0x28, 0x83, 0x00, 0x02, 0x00, 0x00, 0x08, 0xc0, 0x48, 0x05, 0xc1, 0x06, 0xa0,
    0x40, 0xd4, 0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x83, 0x50, 0x06, 0xa0, 0x41, 0xd0, 0x04, 0xc3,
    0xd0, 0xe0, 0x83, 0x50, 0x06, 0xc3, 0x02, 0x83, 0x00, 0xff, 0x13, 0x04, 0x0b, 0x33, 0xd8, 0x03,
    0x83, 0x50, 0x10, 0x1b, 0x04, 0xc0, 0xd0, 0x20, 0x83, 0x4d, 0x13, 0x09, 0xc0, 0x58, 0x06, 0xa0,
    0x41, 0x4c, 0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x83, 0x50, 0x06, 0xa0, 0x41, 0xd0, 0x04, 0xc3,
    0xd0, 0xe0, 0x83, 0x50, 0x06, 0xc3, 0x02, 0x83, 0x00, 0xff, 0x13, 0x04, 0x0b, 0x33, 0xd8, 0x03,
    0x83, 0x50, 0x10, 0x03, 0xd8, 0x03, 0x83, 0x50, 0x10, 0x00, 0xc2, 0xc7, 0x05, 0xcb, 0x04, 0x5b,
    0x03, 0x00, 0x00, 0x00, 0xc1, 0xcb, 0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x45, 0x5b, 0x06, 0xa0,
    0x40, 0xd4, 0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x83, 0x4c, 0x06, 0xa0, 0x40, 0xd4, 0xc0, 0x60,
    0x83, 0x4e, 0x06, 0xc1, 0xd8, 0x01, 0x8c, 0x02, 0x06, 0xc1, 0xd8, 0x01, 0x8c, 0x02, 0x04, 0xc0,
    0xd0, 0x20, 0x88, 0x00, 0x06, 0xc0, 0xc0, 0x60, 0x83, 0x4e, 0x05, 0x81, 0x06, 0xa0, 0x41, 0x4c,
    0x10, 0x4d, 0x03, 0x00, 0x00, 0x00, 0xc1, 0xcb, 0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x45, 0x5c,
    0x06, 0xa0, 0x40, 0xd4, 0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x83, 0x4c, 0x06, 0xa0, 0x40, 0xd4,
    0x02, 0x00, 0x00, 0x0a, 0xc0, 0x60, 0x83, 0x4e, 0x06, 0xa0, 0x41, 0x4c, 0x10, 0x37, 0x03, 0x00,
    0x00, 0x00, 0xc1, 0xcb, 0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x45, 0x5d, 0x06, 0xa0, 0x40, 0xd4,
    0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x83, 0x4c, 0x06, 0xa0, 0x40, 0xd4, 0x02, 0x00, 0x00, 0x0a,
    0xc0, 0x60, 0x83, 0x4e, 0x06, 0xa0, 0x41, 0x4c, 0x10, 0x21, 0x03, 0x00, 0x00, 0x00, 0xc1, 0xcb,
    0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x45, 0x5e, 0x06, 0xa0, 0x40, 0xd4, 0x02, 0x00, 0x00, 0x01,
    0x02, 0x01, 0x83, 0x4c, 0x06, 0xa0, 0x40, 0xd4, 0x02, 0x00, 0x00, 0x0a, 0xc0, 0x60, 0x83, 0x4e,
    0x06, 0xa0, 0x41, 0x4c, 0x02, 0x00, 0x00, 0x0a, 0xc0, 0x60, 0x83, 0x50, 0x06, 0xa0, 0x41, 0x4c,
    0x10, 0x05, 0xc2, 0xc7, 0x05, 0xcb, 0x04, 0x5b, 0xc2, 0xc7, 0x04, 0x5b, 0x02, 0x00, 0x00, 0x01,
    0x02, 0x01, 0x83, 0x50, 0x06, 0xa0, 0x41, 0xd0, 0xd8, 0x20, 0x83, 0x50, 0x83, 0x50, 0x13, 0xf4,
    0x04, 0xc0, 0xd8, 0x20, 0x83, 0x50, 0x83, 0xe1, 0x02, 0x80, 0x00, 0xff, 0x13, 0x04, 0x0b, 0x30,
    0xd8, 0x00, 0x83, 0x50, 0x10, 0xe6, 0xd8, 0x00, 0x83, 0x50, 0x10, 0xe3, 0x03, 0x00, 0x00, 0x00,
    0xc1, 0xcb, 0x02, 0x8c, 0x11, 0x00, 0x16, 0xe0, 0x06, 0xa0, 0x48, 0x9e, 0x10, 0xda, 0x04, 0xc1,
    0xd0, 0x60, 0x83, 0x4c, 0x06, 0xc1, 0x02, 0x81, 0x00, 0x00, 0x13, 0x2a, 0x02, 0x81, 0x00, 0x0f,
    0x15, 0x27, 0x38, 0x60, 0x49, 0x0a, 0xc0, 0x42, 0x02, 0x21, 0x00, 0x06, 0x02, 0x02, 0x3d, 0xef,
    0x60, 0x81, 0xc8, 0x02, 0x83, 0x70, 0xc0, 0x42, 0x05, 0x81, 0x02, 0x61, 0x40, 0x00, 0x06, 0xc1,
    0xd8, 0x01, 0x8c, 0x02, 0x06, 0xc1, 0xd8, 0x01, 0x8c, 0x02, 0x02, 0x02, 0xaa, 0x3f, 0xd8, 0x02,
    0x8c, 0x00, 0x06, 0xc2, 0xd8, 0x02, 0x8c, 0x00, 0x02, 0x02, 0xff, 0x11, 0xd8, 0x02, 0x8c, 0x00,
    0x06, 0xc2, 0xd8, 0x02, 0x8c, 0x00, 0xd8, 0x20, 0x83, 0x4c, 0x8c, 0x00, 0x04, 0xc1, 0x10, 0x02,
    0x02, 0x01, 0x00, 0x01, 0xd8, 0x01, 0x83, 0x50, 0x04, 0x5b, 0x02, 0x06, 0x04, 0xe0, 0x83, 0x5c,
    0x02, 0x00, 0x00, 0x0a, 0x02, 0x01, 0x10, 0x9c, 0x06, 0xa0, 0x41, 0x4c, 0x02, 0x00, 0x10, 0xa5,
    0x06, 0xc0, 0xd8, 0x00, 0x8c, 0x02, 0x06, 0xc0, 0xd8, 0x00, 0x8c, 0x02, 0x04, 0xc0, 0xd0, 0x20,
    0x88, 0x00, 0x06, 0xc0, 0x02, 0x01, 0x10, 0xa6, 0x06, 0xa0, 0x41, 0x4c, 0x02, 0xaa, 0x02, 0x00,
    0x00, 0x01, 0xc0, 0x4a, 0x04, 0xc9, 0x02, 0x21, 0x00, 0x13, 0x06, 0xa0, 0x41, 0xd0, 0x02, 0x89,
    0x00, 0xff, 0x13, 0x01, 0x10, 0x4c, 0x02, 0x00, 0x20, 0x06, 0x02, 0x01, 0x13, 0x80, 0x06, 0xa0,
    0x42, 0x4a, 0x02, 0x00, 0x00, 0x06, 0xa0, 0x0a, 0x02, 0x01, 0x13, 0x80, 0x02, 0x02, 0x00, 0x06,
    0x04, 0x20, 0x40, 0x74, 0xc8, 0x20, 0x83, 0x5c, 0x83, 0x5c, 0x16, 0x02, 0xc8, 0x05, 0x83, 0x5c,
    0xc0, 0x05, 0x02, 0x01, 0x13, 0x86, 0xc0, 0x84, 0x04, 0x20, 0x40, 0x74, 0xc0, 0xc3, 0x16, 0x04,
    0xc8, 0x20, 0x83, 0x5c, 0x83, 0xe8, 0x10, 0x6f, 0x02, 0x00, 0x10, 0x9c, 0x02, 0x01, 0x49, 0xf2,
    0x02, 0x02, 0x00, 0x08, 0x04, 0x20, 0x40, 0x4c, 0x02, 0x00, 0x10, 0xa5, 0x06, 0xc0, 0xd8, 0x00,
    0x8c, 0x02, 0x06, 0xc0, 0xd8, 0x00, 0x8c, 0x02, 0x04, 0xc1, 0xd0, 0x60, 0x88, 0x00, 0x06, 0xc1,
    0xa0, 0x01, 0x06, 0xc0, 0xd8, 0x00, 0x8c, 0x02, 0x06, 0xc0, 0xd8, 0x00, 0x8c, 0x02, 0x04, 0xc1,
    0xd0, 0x60, 0x88, 0x00, 0x02, 0x21, 0x01, 0x00, 0x02, 0x60, 0x40, 0x00, 0x06, 0xc0, 0xd8, 0x00,
    0x8c, 0x02, 0x06, 0xc0, 0xd8, 0x00, 0x8c, 0x02, 0xd8, 0x01, 0x8c, 0x00, 0x10, 0x91, 0x04, 0x20,
    0x00, 0x00, 0x05, 0x00, 0x13, 0x80, 0x00, 0x00, 0x20, 0x06, 0x00, 0x0f, 0xc3, 0xcb, 0x06, 0xa0,
    0x4a, 0x0c, 0xd8, 0x01, 0x8c, 0x00, 0x06, 0x00, 0x16, 0xfc, 0x04, 0x5f, 0x06, 0xc2, 0xd8, 0x02,
    0x8c, 0x02, 0x06, 0xc2, 0xd8, 0x02, 0x8c, 0x02, 0x04, 0x5b, 0xd8, 0x00, 0x9c, 0x02, 0x06, 0xc0,
    0xd8, 0x00, 0x9c, 0x02, 0x04, 0x5b, 0xd0, 0x20, 0x98, 0x00, 0x06, 0xc0, 0xd0, 0x20, 0x98, 0x00,
    0x06, 0xc0, 0x04, 0x5b, 0xc2, 0x8b, 0x06, 0xa0, 0x4a, 0x1a, 0x06, 0xa0, 0x4a, 0x26, 0x02, 0x40,
    0x1f, 0xff, 0x02, 0x20, 0x00, 0x03, 0x06, 0xa0, 0x4a, 0x1a, 0x06, 0xa0, 0x4a, 0x26, 0x06, 0xa0,
    0x4a, 0x1a, 0x06, 0xc1, 0xd8, 0x01, 0x8c, 0x02, 0x06, 0xc1, 0xd8, 0x01, 0x8c, 0x02, 0x04, 0xc0,
    0xd8, 0x00, 0x8c, 0x00, 0xc0, 0x03, 0xd8, 0x20, 0x98, 0x00, 0x8c, 0x00, 0x06, 0x00, 0x16, 0xfb,
    0x06, 0x02, 0x16, 0xf6, 0x04, 0x5a, 0x02, 0x01, 0x4b, 0x68, 0x02, 0x02, 0x00, 0x08, 0x04, 0xc0,
    0xd0, 0x31, 0x06, 0xc0, 0x04, 0x20, 0x40, 0x34, 0x02, 0x20, 0x01, 0x00, 0x06, 0xc0, 0x06, 0x02,
    0x16, 0xf7, 0x02, 0x02, 0x02, 0xff, 0x04, 0xc1, 0x06, 0xa0, 0x4a, 0x0c, 0xd0, 0x60, 0x88, 0x00,
    0x02, 0x21, 0xa0, 0x00, 0x02, 0x81, 0x1f, 0x00, 0x16, 0x02, 0x02, 0x21, 0x01, 0x00, 0x02, 0x62,
    0x40, 0x00, 0x06, 0xa0, 0x4a, 0x0c, 0xd8, 0x01, 0x8c, 0x00, 0x02, 0x42, 0x3f, 0xff, 0x06, 0x02,
    0x18, 0xeb, 0x02, 0x02, 0x40, 0x00, 0x02, 0x01, 0x20, 0x00, 0x02, 0x00, 0x10, 0x00, 0x06, 0xa0,
    0x49, 0xfc, 0x02, 0x03, 0x00, 0x07, 0x02, 0x00, 0x00, 0x4a, 0x02, 0x01, 0x4b, 0x00, 0x02, 0x02,
    0x00, 0x1f, 0x06, 0xa0, 0x4a, 0x34, 0x02, 0x00, 0x00, 0x18, 0x02, 0x01, 0x49, 0x00, 0x02, 0x02,
    0x00, 0x40, 0x06, 0xa0, 0x4a, 0x34, 0x02, 0x00, 0x08, 0x50, 0x02, 0x01, 0x4b, 0x70, 0x02, 0x02,
    0x00, 0x08, 0x04, 0x20, 0x40, 0x4c, 0x02, 0x00, 0x08, 0xf0, 0x02, 0x01, 0x4b, 0x78, 0x02, 0x02,
    0x00, 0x10, 0x04, 0x20, 0x40, 0x4c, 0x02, 0x02, 0x43, 0x80, 0x02, 0x01, 0x13, 0x00, 0x02, 0x00,
    0x00, 0x20, 0x06, 0xa0, 0x49, 0xfc, 0x02, 0xe0, 0x83, 0xe0, 0x02, 0x01, 0x83, 0x00, 0x02, 0x02,
    0x00, 0x4a, 0x04, 0xf1, 0x06, 0x42, 0x16, 0xfd, 0x02, 0x01, 0x00, 0x12, 0x02, 0x02, 0x83, 0x20,
    0x04, 0xc3, 0xcc, 0xa3, 0x4b, 0x56, 0x05, 0xc3, 0x06, 0x41, 0x16, 0xfb, 0xc8, 0x20, 0x83, 0xe8,
    0x83, 0x00, 0x04, 0x60, 0x83, 0x20, 0x1e, 0x00, 0x04, 0xcc, 0x02, 0x0d, 0x98, 0x00, 0x02, 0x0e,
    0x01, 0x08, 0x02, 0x0f, 0x8c, 0x02, 0x04, 0x54, 0x00, 0xe0, 0x00, 0x0e, 0x01, 0x06, 0x00, 0xf3,
    0x3c, 0x42, 0x99, 0xa1, 0xa1, 0x99, 0x42, 0x3c, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
    0x00, 0x7e, 0x42, 0x42, 0x42, 0x42, 0x7e, 0x00, 0x0c, 0x54, 0x49, 0x50, 0x49, 0x2e, 0x54, 0x49,
    0x50, 0x49, 0x43, 0x46, 0x47, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0xe0, 0x83, 0x00, 0xc2, 0x20,
    0x83, 0x2c, 0x02, 0x00, 0x10, 0x9c, 0x02, 0x01, 0x49, 0xf2, 0x02, 0x02, 0x00, 0x0a, 0x04, 0x20,
    0x40, 0x4c, 0x02, 0x20, 0x00, 0x09, 0xc0, 0x48, 0x02, 0x21, 0x00, 0x05, 0x06, 0xc1, 0xd8, 0x01,
    0x8c, 0x02, 0x06, 0xc1, 0xd8, 0x01, 0x8c, 0x02, 0x04, 0xc9, 0xd2, 0x60, 0x88, 0x00, 0x02, 0x89,
    0xb7, 0x00, 0x13, 0x07, 0x02, 0x01, 0x4b, 0x88, 0x02, 0x02, 0x00, 0x0d, 0x04, 0x20, 0x40, 0x4c,
    0x10, 0x11, 0xc0, 0x48, 0x02, 0x21, 0x00, 0x07, 0x06, 0xc1, 0xd8, 0x01, 0x8c, 0x02, 0x06, 0xc1,
    0xd8, 0x01, 0x8c, 0x02, 0x04, 0xc9, 0xd2, 0x60, 0x88, 0x00, 0xc0, 0x89, 0x06, 0xc2, 0x05, 0x82,
    0x04, 0x20, 0x40, 0x98, 0x04, 0x60, 0x49, 0x0c, 0x58, 0x20, 0x83, 0x42, 0x83, 0x42, 0x10, 0x04,
    0x02, 0x00, 0x07, 0x00, 0xd8, 0x00, 0x83, 0x42, 0xc8, 0x08, 0x83, 0x2c, 0x06, 0xc8, 0xd8, 0x08,
    0x8c, 0x02, 0x06, 0xc8, 0xd8, 0x08, 0x8c, 0x02, 0xc2, 0xe0, 0x83, 0x5c, 0x05, 0xcb, 0x02, 0x08,
    0x40, 0x00, 0x58, 0x08, 0x83, 0x54, 0x04, 0x5b, 0x03, 0x00, 0x00, 0x00, 0x02, 0x8c, 0x11, 0x00,
    0x16, 0x2f, 0xc8, 0x0b, 0x83, 0x5c, 0x02, 0xa9, 0xc2, 0x20, 0x83, 0x2c, 0x02, 0x28, 0x00, 0x07,
    0x06, 0xc8, 0xd8, 0x08, 0x8c, 0x02, 0x06, 0xc8, 0xd8, 0x08, 0x8c, 0x02, 0xd0, 0xa0, 0x88, 0x00,
    0xda, 0x60, 0x88, 0x00, 0x00, 0x05, 0x02, 0x82, 0xc8, 0x01, 0x16, 0xd2, 0x04, 0xc2, 0xd0, 0xa0,
    0x88, 0x00, 0x06, 0xc2, 0x02, 0x22, 0x00, 0xd0, 0x02, 0x42, 0x00, 0xff, 0x13, 0xc9, 0x02, 0x82,
    0x00, 0x09, 0x1b, 0xc6, 0xd8, 0x29, 0x00, 0x05, 0x83, 0x4c, 0x06, 0xa0, 0x48, 0x9e, 0xd8, 0x20,
    0x83, 0x50, 0x83, 0x50, 0x16, 0xbd, 0xc2, 0x20, 0x83, 0x2c, 0x02, 0x28, 0x00, 0x0c, 0x10, 0xb4,
    0x04, 0x5b, 0x00, 0x00, 0x42, 0xdc, 0x4c, 0xb0, 0x43, 0x2e, 0x04, 0x54, 0x49, 0x50, 0x49, 0x00,
    0x4c, 0xba, 0x43, 0x2e, 0x04, 0x44, 0x53, 0x4b, 0x30, 0x00, 0x4c, 0xc4, 0x43, 0x2e, 0x04, 0x44,
    0x53, 0x4b, 0x31, 0x00, 0x4c, 0xce, 0x43, 0x2e, 0x04, 0x44, 0x53, 0x4b, 0x32, 0x00, 0x4c, 0xd8,
    0x43, 0x2e, 0x04, 0x44, 0x53, 0x4b, 0x33, 0x00, 0x4c, 0xe2, 0x43, 0x2e, 0x04, 0x44, 0x53, 0x4b,
    0x34, 0x00, 0x4c, 0xec, 0x43, 0x2e, 0x04, 0x44, 0x53, 0x4b, 0x35, 0x00, 0x4c, 0xf6, 0x43, 0x2e,
    0x04, 0x44, 0x53, 0x4b, 0x36, 0x00, 0x4d, 0x00, 0x43, 0x2e, 0x04, 0x44, 0x53, 0x4b, 0x37, 0x00,
    0x4d, 0x0a, 0x43, 0x2e, 0x04, 0x44, 0x53, 0x4b, 0x38, 0x00, 0x4d, 0x14, 0x43, 0x2e, 0x04, 0x44,
    0x53, 0x4b, 0x39, 0x00, 0x4d, 0x1c, 0x43, 0x2e, 0x03, 0x44, 0x53, 0x4b, 0x4d, 0x24, 0x43, 0x2e,
    0x02, 0x50, 0x49, 0x00, 0x4d, 0x2e, 0x43, 0x2e, 0x04, 0x55, 0x52, 0x49, 0x31, 0x00, 0x4d, 0x38,
    0x43, 0x2e, 0x04, 0x55, 0x52, 0x49, 0x32, 0x00, 0x4d, 0x42, 0x43, 0x2e, 0x04, 0x55, 0x52, 0x49,
    0x33, 0x00, 0x00, 0x00, 0x43, 0x2e, 0x03, 0x43, 0x53, 0x31, 0x4d, 0x54, 0x4b, 0x95, 0x04, 0x54,
    0x49, 0x50, 0x49, 0x00, 0x4d, 0x5e, 0x4c, 0x38, 0x05, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x4d, 0x64,
    0x45, 0x60, 0x01, 0x10, 0x4d, 0x6a, 0x45, 0xe4, 0x01, 0x12, 0x4d, 0x70, 0x46, 0x12, 0x01, 0x13,
    0x4d, 0x76, 0x46, 0x4c, 0x01, 0x14, 0x4d, 0x7c, 0x46, 0xe0, 0x01, 0x15, 0x4d, 0x82, 0x48, 0x8c,
    0x01, 0x16, 0x4d, 0x88, 0x47, 0x80, 0x01, 0x17, 0x4d, 0x8e, 0x47, 0xc2, 0x01, 0x18, 0x4d, 0x94,
    0x47, 0xee, 0x01, 0x19, 0x00, 0x00, 0x48, 0x1a, 0x01, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
];
